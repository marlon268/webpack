1.	Instalación y configuración de webpack
npm install webpack-cli -D
Y luego ejecutamos webpack npx lo que hace es ejecutar paquetes directamente de npm, este viene instalado de npx
npx webpack
Al hacer esto webpack creo una carpeta llamada dist, esto lo hace por defecto webpack sin preguntarnos.

Modo de desarrollo
Por defecto webpack al compilar nuestro proyecto setea el modo “production” implícitamente, pero podemos definirle el modo explícitamente corriendo:
npx webpack --mode production
npx webpack --mode development
La diferencia radica que el modo development deja el código mas legible para los desarrolladores pero con comentarios, el modo production deja el código comprimido y mas limpio para usarse.



2.	Babel comando de instalación y configuración
npm install -D babel-loader @babel/core @babel/preset-env @babel/plugin-transform-runtime
babel-loader nos permite usar babel con webpack
@babel/core es babel en general
@babel/preset-env trae y te permite usar las ultimas características de JavaScript
@babel/plugin-transform-runtime te permite trabajar con todo el tema de asincronismo como ser async y await
Debes crear el archivo de configuración de babel el cual tiene como nombre .babelrc 

RESUMEN: Babel te ayuda a transpilar el código JavaScript, a un resultado el cual todos los navegadores lo puedan entender y ejecutar. Trae “extensiones” o plugins las cuales nos permiten tener características más allá del JavaScript común



3.	HTML en webpack
HtmlWebpackPlugin
Es un plugin para inyectar javascript, css, favicons, y nos facilita la tarea de enlazar los bundles a nuestro template HTML.
Instalación
npm
npm install html-webpack-plugin -D



4.	Loaders de fuentes
Cuando utilizamos fuentes externas una buena práctica es descargarlas a nuestro proyecto
Debido a que no hara un llamado a otros sitios
Por ello es importante usarlo dentro de webpack
Para esta tarea instalaras y usaras “file-loader” y “url-loader”
instalación con NPM
npm install url-loader file-loader -D



5.	Optimización: hashes, compresión y minificación de archivos
¿Por qué es importante usar Hashes en nuestros archivos?
Los recursos que se guardan en memoria cache suceden cuando el navegador entra a un sitio por primera vez detecta los recursos y los guarda. Por ello la siguiente vez sera mucho más rápido porque estarán en memoria.

La desventaja esta cuando sacamos una nueva versión, porque tendrán un mismo nombre evitando que se descargue los nuevos cambios, por lo tanto, el usuario no recibirá los nuevos cambios.

Para que no haya conflictos con la cache una vez que tengamos nuestro proyecto en producción es importante darles un hash para cada nueva versión
Responder

Unos de las razones por que utilizamos webpack es porque nos permite optimizar y comprimir nuestro proyecto
Debes utilizar los siguientes paquetes
css-minimizer-webpack-plugin ⇒ Nos ayuda a comprimir nuestros archivos finales CSS
terser-webpack-plugin ⇒ Permite minificar de una mejor forma
Instalación
NPM
npm i css-minimizer-webpack-plugin terser-webpack-plugin -D



6. Es importante considerar las variables de entorno va a ser un espacio seguro donde podemos guardar datos sensibles
Por ejemplo, subir llaves al repositorio no es buena idea cuando tienes un proyecto open source
Para instalar debemos correr el comando
NPM
npm install dotenv-webpack -D



7. Webpack en modo producción
Actualmente tenemos el problema de tener varios archivos repetidos los cuales se fueron acumulando por compilaciones anteriores
Para ello puedes limpiar la carpeta cada vez que hacemos un build, usando clean-webpack-plugin
Cabe recalcar que esta característica es mucho más util para la configuración de producción
Para instalarlo debes correr el siguiente comando:
NPM
npm install clean-webpack-plugin -D